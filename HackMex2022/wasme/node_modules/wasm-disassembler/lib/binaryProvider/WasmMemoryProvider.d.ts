import { WasmBinaryProvider } from './WasmBinaryProvider';
import { U32 } from './U32';
import { ValueType } from '../wasmTypes/ValueType';
export declare class WasmMemoryProvider extends Uint8Array implements WasmBinaryProvider {
    Length: number;
    private log;
    constructor(binary: Uint8Array, logger?: (message: string) => void);
    Slice(initialPointer: number, finalPointer: number): Uint8Array;
    GetRawByte(pointer: number): number;
    Getu32(initialPointer: number): U32;
    GetUnsigned128Leb(initialPointer: number): {
        result: number;
        bytesUsed: number;
    };
    GetRawUint32(startingPointer: number): number;
    /** @inheritdoc */
    ReadName(initialPointer: number): [string, number];
    /** @inheritdoc */
    ReadValueType(initialPointer: number): ValueType | null;
}
